name: Build and Deploy API Code

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: testing
    env:
      ENV_STATE: test
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DEBUG: ${{secrets.DEBUG}}
      DATABASE_URL: ${{secrets.DATABASE_URL}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}
      DB_FORCE_ROLL_BACK: ${{secrets.DB_FORCE_ROLL_BACK}}
      TEST_DATABASE_URL: ${{secrets.TEST_DATABASE_URL}}
      TEST_DB_FORCE_ROLL_BACK: ${{secrets.TEST_DB_FORCE_ROLL_BACK}}
      TEST_DEBUG: ${{secrets.TEST_DEBUG}}
      TEST_SECRET_KEY: ${{secrets.TEST_SECRET_KEY}}
      TEST_ALGORITHM: ${{secrets.TEST_ALGORITHM}}
      TEST_ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.TEST_ACCESS_TOKEN_EXPIRE_MINUTES}}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Pulling git repo
        uses: actions/checkout@v5
      - name: Install Python Version 3.13
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"
      - name: Update Pip
        run: python -m pip install --upgrade pip
      - name: Install Dependencies
        run: pip install -r requirements.txt
      - name: Testing with Pytest
        run: |
          pip install pytest 
          pytest
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # - name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@v3

      # - name: Build and Push Docker image
      #   id: docker_build
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     file: ./Dockerfile
      #     push: true
      #     tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:latest
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max
      #     provenance: false # prevents build metadata issues
      #     load: false # faster builds in CI
      #     build-args: |
      #       BUILDKIT_PROGRESS=plain   # shows full build logs

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Test Deploy Action
        run: echo "Hello World"
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   environment:
  #     name: production
  #   steps:
  #     - name: pulling git repo
  #       uses: actions/checkout@v5
  #     - name: deploy to ubuntu server
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{secrets.UBUNTU_PROD_HOST}}
  #         username: ${{secrets.PROD_USERNAME}}
  #         password: ${{secrets.PROD_PASSWORD}}
  #         scripts: |
  #           cd app/src
  #           git pull
  #           echo ${{secrets.PROD_PASSWORD}} | sudo -S systemctl restart api
